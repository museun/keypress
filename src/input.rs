use winapi::um::winuser;

use std::fmt;

#[derive(Debug)]
pub struct Event {
    pub key: Key,
    pub state: KeyState,
    pub modifier: Modifier,
}

impl Event {
    pub fn new(key: Key, state: KeyState) -> Self {
        Self {
            key,
            state,
            modifier: Modifier::new(),
        }
    }
}

const KEY_STATES: [i32; 6] = [
    winuser::VK_LSHIFT,
    winuser::VK_RSHIFT,
    winuser::VK_LCONTROL,
    winuser::VK_RCONTROL,
    winuser::VK_LMENU, // these are Alt
    winuser::VK_RMENU,
];

#[derive(PartialEq, Debug)]
pub enum KeyState {
    Pressed,
    Released,
}

//      0x0000_0000
// RCONTROL----^^^^
// LCONTROl-----|||
// RSHIFT--------||
// LSHIFT---------|
#[derive(Default)]
pub struct Modifier(u8);

impl Modifier {
    pub fn left_shift(&self) -> bool {
        self.0 & 1 != 0
    }

    pub fn right_shift(&self) -> bool {
        self.0 & (1 << 1) != 0
    }

    pub fn left_ctrl(&self) -> bool {
        self.0 & (1 << 2) != 0
    }

    pub fn right_ctrl(&self) -> bool {
        self.0 & (1 << 3) != 0
    }

    pub fn left_alt(&self) -> bool {
        self.0 & (1 << 4) != 0
    }

    pub fn right_alt(&self) -> bool {
        self.0 & (1 << 5) != 0
    }
}

impl fmt::Debug for Modifier {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:08b}", self.0)
    }
}

impl Modifier {
    pub fn new() -> Self {
        let mut bad = 0u8;

        unsafe {
            for (i, ks) in KEY_STATES.iter().enumerate() {
                let res = winuser::GetKeyState(*ks);
                if res.is_negative() {
                    bad |= 1u8 << (i as u8);
                }
            }
        }

        Modifier(bad)
    }
}

#[allow(non_camel_case_types)]
#[derive(PartialEq, Clone, Copy, Serialize, Deserialize)]
pub enum Key {
    VK_BACK,
    VK_TAB,
    VK_CLEAR,
    VK_RETURN,
    VK_SHIFT,
    VK_CONTROL,
    VK_MENU,
    VK_PAUSE,
    VK_CAPITAL,
    VK_ESCAPE,
    VK_SPACE,
    VK_PRIOR,
    VK_NEXT,
    VK_END,
    VK_HOME,
    VK_LEFT,
    VK_UP,
    VK_RIGHT,
    VK_DOWN,
    VK_SELECT,
    VK_PRINT,
    VK_EXECUTE,
    VK_SNAPSHOT,
    VK_INSERT,
    VK_DELETE,
    VK_HELP,
    KEY_0,
    KEY_1,
    KEY_2,
    KEY_3,
    KEY_4,
    KEY_5,
    KEY_6,
    KEY_7,
    KEY_8,
    KEY_9,
    KEY_A,
    KEY_B,
    KEY_C,
    KEY_D,
    KEY_E,
    KEY_F,
    KEY_G,
    KEY_H,
    KEY_I,
    KEY_J,
    KEY_K,
    KEY_L,
    KEY_M,
    KEY_N,
    KEY_O,
    KEY_P,
    KEY_Q,
    KEY_R,
    KEY_S,
    KEY_T,
    KEY_U,
    KEY_V,
    KEY_W,
    KEY_X,
    KEY_Y,
    KEY_Z,
    VK_LWIN,
    VK_RWIN,
    VK_APPS,
    VK_NUMPAD0,
    VK_NUMPAD1,
    VK_NUMPAD2,
    VK_NUMPAD3,
    VK_NUMPAD4,
    VK_NUMPAD5,
    VK_NUMPAD6,
    VK_NUMPAD7,
    VK_NUMPAD8,
    VK_NUMPAD9,
    VK_MULTIPLY,
    VK_ADD,
    VK_SEPARATOR,
    VK_SUBTRACT,
    VK_DECIMAL,
    VK_DIVIDE,
    VK_F1,
    VK_F2,
    VK_F3,
    VK_F4,
    VK_F5,
    VK_F6,
    VK_F7,
    VK_F8,
    VK_F9,
    VK_F10,
    VK_F11,
    VK_F12,
    VK_F13,
    VK_F14,
    VK_F15,
    VK_F16,
    VK_F17,
    VK_F18,
    VK_F19,
    VK_F20,
    VK_F21,
    VK_F22,
    VK_F23,
    VK_F24,
    VK_NUMLOCK,
    VK_SCROLL,
    VK_LSHIFT,
    VK_RSHIFT,
    VK_LCONTROL,
    VK_RCONTROL,
    VK_LMENU,
    VK_RMENU,
    VK_OEM_COMMA,
    VK_OEM_MINUS,
    VK_OEM_PERIOD,

    SC_DASH,
    SC_UNDERSCORE,
    SC_EQUALS,
    SC_PLUS,
    SC_OPEN_SQUARE_BRACKET,
    SC_OPEN_CURLY_BRACKET,
    SC_CLOSE_SQUARE_BRACKET,
    SC_CLOSE_CURLY_BRACKET,
    SC_SEMICOLON,
    SC_COLON,
    SC_SQUOTE,
    SC_DQUOTE,
    SC_BACKTICK,
    SC_TIDLE,
    SC_BACKSLASH,
    SC_PIPE,
    SC_COMMA,
    SC_OPEN_ANGLE_BRACKET,
    SC_PERIOD,
    SC_CLOSE_ANGLE_BRACKET,
    SC_FORWARD_SLASH,
    SC_QUESTION_MARK,
}

impl Key {
    pub fn try_make(key: usize, shift: bool, alt: bool) -> Option<Self> {
        if alt {
            return Some(Key::VK_LMENU);
        }

        let s = match (key, shift) {
            (0x0C, false) => Key::SC_DASH,
            (0x0D, false) => Key::SC_EQUALS,
            (0x1A, false) => Key::SC_OPEN_SQUARE_BRACKET,
            (0x1B, false) => Key::SC_CLOSE_SQUARE_BRACKET,
            (0x27, false) => Key::SC_SEMICOLON,
            (0x28, false) => Key::SC_SQUOTE,
            (0x29, false) => Key::SC_BACKTICK,
            (0x2B, false) => Key::SC_BACKSLASH,
            (0x33, false) => Key::SC_COMMA,
            (0x34, false) => Key::SC_CLOSE_ANGLE_BRACKET,
            (0x35, false) => Key::SC_FORWARD_SLASH,
            (0x0C, true) => Key::SC_UNDERSCORE,
            (0x0D, true) => Key::SC_PLUS,
            (0x1A, true) => Key::SC_OPEN_CURLY_BRACKET,
            (0x1B, true) => Key::SC_CLOSE_CURLY_BRACKET,
            (0x27, true) => Key::SC_COLON,
            (0x28, true) => Key::SC_DQUOTE,
            (0x29, true) => Key::SC_TIDLE,
            (0x2B, true) => Key::SC_PIPE,
            (0x33, true) => Key::SC_OPEN_ANGLE_BRACKET,
            (0x34, true) => Key::SC_CLOSE_ANGLE_BRACKET,
            (0x35, true) => Key::SC_QUESTION_MARK,

            _ => return None,
        };

        Some(s)
    }
}

impl fmt::Display for Key {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Key::VK_BACK => write!(f, "Backspace"),
            Key::VK_TAB => write!(f, "Tab"),
            Key::VK_CLEAR => write!(f, "Clear"),
            Key::VK_RETURN => write!(f, "Enter"),
            Key::VK_SHIFT => write!(f, "Shift"),
            Key::VK_CONTROL => write!(f, "Ctrl"),
            Key::VK_MENU => write!(f, "Alt"),
            Key::VK_PAUSE => write!(f, "Pause"),
            Key::VK_CAPITAL => write!(f, "Caps Lock"),
            Key::VK_ESCAPE => write!(f, "Esc"),
            Key::VK_SPACE => write!(f, "Spacebar"),
            Key::VK_PRIOR => write!(f, "Page Up"),
            Key::VK_NEXT => write!(f, "Page Down"),
            Key::VK_END => write!(f, "End"),
            Key::VK_HOME => write!(f, "Home"),
            Key::VK_LEFT => write!(f, "Left Arrow"),
            Key::VK_UP => write!(f, "Up Arrow"),
            Key::VK_RIGHT => write!(f, "Right Arrow"),
            Key::VK_DOWN => write!(f, "Down Arrow"),
            Key::VK_SELECT => write!(f, "Select"),
            Key::VK_PRINT => write!(f, "Print"),
            Key::VK_EXECUTE => write!(f, "Execute"),
            Key::VK_SNAPSHOT => write!(f, "Print Screen"),
            Key::VK_INSERT => write!(f, "Ins"),
            Key::VK_DELETE => write!(f, "Del"),
            Key::VK_HELP => write!(f, "Help"),
            Key::KEY_0 => write!(f, "0"),
            Key::KEY_1 => write!(f, "1"),
            Key::KEY_2 => write!(f, "2"),
            Key::KEY_3 => write!(f, "3"),
            Key::KEY_4 => write!(f, "4"),
            Key::KEY_5 => write!(f, "5"),
            Key::KEY_6 => write!(f, "6"),
            Key::KEY_7 => write!(f, "7"),
            Key::KEY_8 => write!(f, "8"),
            Key::KEY_9 => write!(f, "9"),
            Key::KEY_A => write!(f, "A"),
            Key::KEY_B => write!(f, "B"),
            Key::KEY_C => write!(f, "C"),
            Key::KEY_D => write!(f, "D"),
            Key::KEY_E => write!(f, "E"),
            Key::KEY_F => write!(f, "F"),
            Key::KEY_G => write!(f, "G"),
            Key::KEY_H => write!(f, "H"),
            Key::KEY_I => write!(f, "I"),
            Key::KEY_J => write!(f, "J"),
            Key::KEY_K => write!(f, "K"),
            Key::KEY_L => write!(f, "L"),
            Key::KEY_M => write!(f, "M"),
            Key::KEY_N => write!(f, "N"),
            Key::KEY_O => write!(f, "O"),
            Key::KEY_P => write!(f, "P"),
            Key::KEY_Q => write!(f, "Q"),
            Key::KEY_R => write!(f, "R"),
            Key::KEY_S => write!(f, "S"),
            Key::KEY_T => write!(f, "T"),
            Key::KEY_U => write!(f, "U"),
            Key::KEY_V => write!(f, "V"),
            Key::KEY_W => write!(f, "W"),
            Key::KEY_X => write!(f, "X"),
            Key::KEY_Y => write!(f, "Y"),
            Key::KEY_Z => write!(f, "Z"),
            Key::VK_LWIN => write!(f, "Left Windows"),
            Key::VK_RWIN => write!(f, "Right Windows"),
            Key::VK_APPS => write!(f, "Applications"),
            Key::VK_NUMPAD0 => write!(f, "Num 0"),
            Key::VK_NUMPAD1 => write!(f, "Num 1"),
            Key::VK_NUMPAD2 => write!(f, "Num 2"),
            Key::VK_NUMPAD3 => write!(f, "Num 3"),
            Key::VK_NUMPAD4 => write!(f, "Num 4"),
            Key::VK_NUMPAD5 => write!(f, "Num 5"),
            Key::VK_NUMPAD6 => write!(f, "Num 6"),
            Key::VK_NUMPAD7 => write!(f, "Num 7"),
            Key::VK_NUMPAD8 => write!(f, "Num 8"),
            Key::VK_NUMPAD9 => write!(f, "Num 9"),
            Key::VK_MULTIPLY => write!(f, "*"),
            Key::VK_ADD => write!(f, "+"),
            Key::VK_SEPARATOR => write!(f, ","),
            Key::VK_SUBTRACT => write!(f, "-"),
            Key::VK_DECIMAL => write!(f, "."),
            Key::VK_DIVIDE => write!(f, "/"),
            Key::VK_F1 => write!(f, "F1"),
            Key::VK_F2 => write!(f, "F2"),
            Key::VK_F3 => write!(f, "F3"),
            Key::VK_F4 => write!(f, "F4"),
            Key::VK_F5 => write!(f, "F5"),
            Key::VK_F6 => write!(f, "F6"),
            Key::VK_F7 => write!(f, "F7"),
            Key::VK_F8 => write!(f, "F8"),
            Key::VK_F9 => write!(f, "F9"),
            Key::VK_F10 => write!(f, "F10"),
            Key::VK_F11 => write!(f, "F11"),
            Key::VK_F12 => write!(f, "F12"),
            Key::VK_F13 => write!(f, "F13"),
            Key::VK_F14 => write!(f, "F14"),
            Key::VK_F15 => write!(f, "F15"),
            Key::VK_F16 => write!(f, "F16"),
            Key::VK_F17 => write!(f, "F17"),
            Key::VK_F18 => write!(f, "F18"),
            Key::VK_F19 => write!(f, "F19"),
            Key::VK_F20 => write!(f, "F20"),
            Key::VK_F21 => write!(f, "F21"),
            Key::VK_F22 => write!(f, "F22"),
            Key::VK_F23 => write!(f, "F23"),
            Key::VK_F24 => write!(f, "F24"),
            Key::VK_NUMLOCK => write!(f, "Num Lock"),
            Key::VK_SCROLL => write!(f, "Scroll Lock"),
            Key::VK_LSHIFT => write!(f, "Left Shift"),
            Key::VK_RSHIFT => write!(f, "Right Shift"),
            Key::VK_LCONTROL => write!(f, "Left Control"),
            Key::VK_RCONTROL => write!(f, "Right Control"),
            Key::VK_LMENU => write!(f, "Left Menu"),
            Key::VK_RMENU => write!(f, "Right Menu"),
            Key::VK_OEM_COMMA => write!(f, ","),
            Key::VK_OEM_MINUS => write!(f, "-"),
            Key::VK_OEM_PERIOD => write!(f, "."),

            Key::SC_DASH => write!(f, "-"),
            Key::SC_UNDERSCORE => write!(f, "_"),
            Key::SC_EQUALS => write!(f, "="),
            Key::SC_PLUS => write!(f, "+"),
            Key::SC_OPEN_SQUARE_BRACKET => write!(f, "["),
            Key::SC_OPEN_CURLY_BRACKET => write!(f, "{{"),
            Key::SC_CLOSE_SQUARE_BRACKET => write!(f, "]"),
            Key::SC_CLOSE_CURLY_BRACKET => write!(f, "}}"),
            Key::SC_SEMICOLON => write!(f, ";"),
            Key::SC_COLON => write!(f, ":"),
            Key::SC_SQUOTE => write!(f, "'"),
            Key::SC_DQUOTE => write!(f, "\""),
            Key::SC_BACKTICK => write!(f, "`"),
            Key::SC_TIDLE => write!(f, "~"),
            Key::SC_BACKSLASH => write!(f, "\\"),
            Key::SC_PIPE => write!(f, "|"),
            Key::SC_COMMA => write!(f, ","),
            Key::SC_OPEN_ANGLE_BRACKET => write!(f, "<"),
            Key::SC_PERIOD => write!(f, "."),
            Key::SC_CLOSE_ANGLE_BRACKET => write!(f, ">"),
            Key::SC_FORWARD_SLASH => write!(f, "/"),
            Key::SC_QUESTION_MARK => write!(f, "?"),
        }
    }
}

impl fmt::Debug for Key {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Key::VK_BACK => write!(f, "(0x08) VK_BACK"),
            Key::VK_TAB => write!(f, "(0x09) VK_TAB"),
            Key::VK_CLEAR => write!(f, "(0x0C) VK_CLEAR"),
            Key::VK_RETURN => write!(f, "(0x0D) VK_RETURN"),
            Key::VK_SHIFT => write!(f, "(0x10) VK_SHIFT"),
            Key::VK_CONTROL => write!(f, "(0x11) VK_CONTROL"),
            Key::VK_MENU => write!(f, "(0x12) VK_MENU"),
            Key::VK_PAUSE => write!(f, "(0x13) VK_PAUSE"),
            Key::VK_CAPITAL => write!(f, "(0x14) VK_CAPITAL"),
            Key::VK_ESCAPE => write!(f, "(0x1B) VK_ESCAPE"),
            Key::VK_SPACE => write!(f, "(0x20) VK_SPACE"),
            Key::VK_PRIOR => write!(f, "(0x21) VK_PRIOR"),
            Key::VK_NEXT => write!(f, "(0x22) VK_NEXT"),
            Key::VK_END => write!(f, "(0x23) VK_END"),
            Key::VK_HOME => write!(f, "(0x24) VK_HOME"),
            Key::VK_LEFT => write!(f, "(0x25) VK_LEFT"),
            Key::VK_UP => write!(f, "(0x26) VK_UP"),
            Key::VK_RIGHT => write!(f, "(0x27) VK_RIGHT"),
            Key::VK_DOWN => write!(f, "(0x28) VK_DOWN"),
            Key::VK_SELECT => write!(f, "(0x29) VK_SELECT"),
            Key::VK_PRINT => write!(f, "(0x2A) VK_PRINT"),
            Key::VK_EXECUTE => write!(f, "(0x2B) VK_EXECUTE"),
            Key::VK_SNAPSHOT => write!(f, "(0x2C) VK_SNAPSHOT"),
            Key::VK_INSERT => write!(f, "(0x2D) VK_INSERT"),
            Key::VK_DELETE => write!(f, "(0x2E) VK_DELETE"),
            Key::VK_HELP => write!(f, "(0x2F) VK_HELP"),
            Key::KEY_0 => write!(f, "(0x30) KEY_0"),
            Key::KEY_1 => write!(f, "(0x31) KEY_1"),
            Key::KEY_2 => write!(f, "(0x32) KEY_2"),
            Key::KEY_3 => write!(f, "(0x33) KEY_3"),
            Key::KEY_4 => write!(f, "(0x34) KEY_4"),
            Key::KEY_5 => write!(f, "(0x35) KEY_5"),
            Key::KEY_6 => write!(f, "(0x36) KEY_6"),
            Key::KEY_7 => write!(f, "(0x37) KEY_7"),
            Key::KEY_8 => write!(f, "(0x38) KEY_8"),
            Key::KEY_9 => write!(f, "(0x39) KEY_9"),
            Key::KEY_A => write!(f, "(0x41) KEY_A"),
            Key::KEY_B => write!(f, "(0x42) KEY_B"),
            Key::KEY_C => write!(f, "(0x43) KEY_C"),
            Key::KEY_D => write!(f, "(0x44) KEY_D"),
            Key::KEY_E => write!(f, "(0x45) KEY_E"),
            Key::KEY_F => write!(f, "(0x46) KEY_F"),
            Key::KEY_G => write!(f, "(0x47) KEY_G"),
            Key::KEY_H => write!(f, "(0x48) KEY_H"),
            Key::KEY_I => write!(f, "(0x49) KEY_I"),
            Key::KEY_J => write!(f, "(0x4A) KEY_J"),
            Key::KEY_K => write!(f, "(0x4B) KEY_K"),
            Key::KEY_L => write!(f, "(0x4C) KEY_L"),
            Key::KEY_M => write!(f, "(0x4D) KEY_M"),
            Key::KEY_N => write!(f, "(0x4E) KEY_N"),
            Key::KEY_O => write!(f, "(0x4F) KEY_O"),
            Key::KEY_P => write!(f, "(0x50) KEY_P"),
            Key::KEY_Q => write!(f, "(0x51) KEY_Q"),
            Key::KEY_R => write!(f, "(0x52) KEY_R"),
            Key::KEY_S => write!(f, "(0x53) KEY_S"),
            Key::KEY_T => write!(f, "(0x54) KEY_T"),
            Key::KEY_U => write!(f, "(0x55) KEY_U"),
            Key::KEY_V => write!(f, "(0x56) KEY_V"),
            Key::KEY_W => write!(f, "(0x57) KEY_W"),
            Key::KEY_X => write!(f, "(0x58) KEY_X"),
            Key::KEY_Y => write!(f, "(0x59) KEY_Y"),
            Key::KEY_Z => write!(f, "(0x5A) KEY_Z"),
            Key::VK_LWIN => write!(f, "(0x5B) VK_LWIN"),
            Key::VK_RWIN => write!(f, "(0x5C) VK_RWIN"),
            Key::VK_APPS => write!(f, "(0x5D) VK_APPS"),
            Key::VK_NUMPAD0 => write!(f, "(0x60) VK_NUMPAD0"),
            Key::VK_NUMPAD1 => write!(f, "(0x61) VK_NUMPAD1"),
            Key::VK_NUMPAD2 => write!(f, "(0x62) VK_NUMPAD2"),
            Key::VK_NUMPAD3 => write!(f, "(0x63) VK_NUMPAD3"),
            Key::VK_NUMPAD4 => write!(f, "(0x64) VK_NUMPAD4"),
            Key::VK_NUMPAD5 => write!(f, "(0x65) VK_NUMPAD5"),
            Key::VK_NUMPAD6 => write!(f, "(0x66) VK_NUMPAD6"),
            Key::VK_NUMPAD7 => write!(f, "(0x67) VK_NUMPAD7"),
            Key::VK_NUMPAD8 => write!(f, "(0x68) VK_NUMPAD8"),
            Key::VK_NUMPAD9 => write!(f, "(0x69) VK_NUMPAD9"),
            Key::VK_MULTIPLY => write!(f, "(0x6A) VK_MULTIPLY"),
            Key::VK_ADD => write!(f, "(0x6B) VK_ADD"),
            Key::VK_SEPARATOR => write!(f, "(0x6C) VK_SEPARATOR"),
            Key::VK_SUBTRACT => write!(f, "(0x6D) VK_SUBTRACT"),
            Key::VK_DECIMAL => write!(f, "(0x6E) VK_DECIMAL"),
            Key::VK_DIVIDE => write!(f, "(0x6F) VK_DIVIDE"),
            Key::VK_F1 => write!(f, "(0x70) VK_F1"),
            Key::VK_F2 => write!(f, "(0x71) VK_F2"),
            Key::VK_F3 => write!(f, "(0x72) VK_F3"),
            Key::VK_F4 => write!(f, "(0x73) VK_F4"),
            Key::VK_F5 => write!(f, "(0x74) VK_F5"),
            Key::VK_F6 => write!(f, "(0x75) VK_F6"),
            Key::VK_F7 => write!(f, "(0x76) VK_F7"),
            Key::VK_F8 => write!(f, "(0x77) VK_F8"),
            Key::VK_F9 => write!(f, "(0x78) VK_F9"),
            Key::VK_F10 => write!(f, "(0x79) VK_F10"),
            Key::VK_F11 => write!(f, "(0x7A) VK_F11"),
            Key::VK_F12 => write!(f, "(0x7B) VK_F12"),
            Key::VK_F13 => write!(f, "(0x7C) VK_F13"),
            Key::VK_F14 => write!(f, "(0x7D) VK_F14"),
            Key::VK_F15 => write!(f, "(0x7E) VK_F15"),
            Key::VK_F16 => write!(f, "(0x7F) VK_F16"),
            Key::VK_F17 => write!(f, "(0x80) VK_F17"),
            Key::VK_F18 => write!(f, "(0x81) VK_F18"),
            Key::VK_F19 => write!(f, "(0x82) VK_F19"),
            Key::VK_F20 => write!(f, "(0x83) VK_F20"),
            Key::VK_F21 => write!(f, "(0x84) VK_F21"),
            Key::VK_F22 => write!(f, "(0x85) VK_F22"),
            Key::VK_F23 => write!(f, "(0x86) VK_F23"),
            Key::VK_F24 => write!(f, "(0x87) VK_F24"),
            Key::VK_NUMLOCK => write!(f, "(0x90) VK_NUMLOCK"),
            Key::VK_SCROLL => write!(f, "(0x91) VK_SCROLL"),
            Key::VK_LSHIFT => write!(f, "(0xA0) VK_LSHIFT"),
            Key::VK_RSHIFT => write!(f, "(0xA1) VK_RSHIFT"),
            Key::VK_LCONTROL => write!(f, "(0xA2) VK_LCONTROL"),
            Key::VK_RCONTROL => write!(f, "(0xA3) VK_RCONTROL"),
            Key::VK_LMENU => write!(f, "(0xA4) VK_LMENU"),
            Key::VK_RMENU => write!(f, "(0xA5) VK_RMENU"),
            Key::VK_OEM_COMMA => write!(f, "(0xBC) VK_OEM_COMMA"),
            Key::VK_OEM_MINUS => write!(f, "(0xBD) VK_OEM_MINUS"),
            Key::VK_OEM_PERIOD => write!(f, "(0xBE) VK_OEM_PERIOD"),
            _ => Ok(()),
        }
    }
}

pub(crate) static KEY_TABLE: &[Option<Key>; 1 << 8] = &[
    /*0x00*/ None,
    /*0x01*/ None,
    /*0x02*/ None,
    /*0x03*/ None,
    /*0x04*/ None,
    /*0x05*/ None,
    /*0x06*/ None,
    /*0x07*/ None,
    /*0x08*/ Some(Key::VK_BACK),
    /*0x09*/ Some(Key::VK_TAB),
    /*0x0A*/ None,
    /*0x0B*/ None,
    /*0x0C*/ Some(Key::VK_CLEAR),
    /*0x0D*/ Some(Key::VK_RETURN),
    /*0x0E*/ None,
    /*0x0F*/ None,
    /*0x10*/ Some(Key::VK_SHIFT),
    /*0x11*/ Some(Key::VK_CONTROL),
    /*0x12*/ Some(Key::VK_MENU),
    /*0x13*/ Some(Key::VK_PAUSE),
    /*0x14*/ Some(Key::VK_CAPITAL),
    /*0x15*/ None,
    /*0x16*/ None,
    /*0x17*/ None,
    /*0x18*/ None,
    /*0x19*/ None,
    /*0x1A*/ None,
    /*0x1B*/ Some(Key::VK_ESCAPE),
    /*0x1C*/ None,
    /*0x1D*/ None,
    /*0x1E*/ None,
    /*0x1F*/ None,
    /*0x20*/ Some(Key::VK_SPACE),
    /*0x21*/ Some(Key::VK_PRIOR),
    /*0x22*/ Some(Key::VK_NEXT),
    /*0x23*/ Some(Key::VK_END),
    /*0x24*/ Some(Key::VK_HOME),
    /*0x25*/ Some(Key::VK_LEFT),
    /*0x26*/ Some(Key::VK_UP),
    /*0x27*/ Some(Key::VK_RIGHT),
    /*0x28*/ Some(Key::VK_DOWN),
    /*0x29*/ Some(Key::VK_SELECT),
    /*0x2A*/ Some(Key::VK_PRINT),
    /*0x2B*/ Some(Key::VK_EXECUTE),
    /*0x2C*/ Some(Key::VK_SNAPSHOT),
    /*0x2D*/ Some(Key::VK_INSERT),
    /*0x2E*/ Some(Key::VK_DELETE),
    /*0x2F*/ Some(Key::VK_HELP),
    /*0x30*/ Some(Key::KEY_0),
    /*0x31*/ Some(Key::KEY_1),
    /*0x32*/ Some(Key::KEY_2),
    /*0x33*/ Some(Key::KEY_3),
    /*0x34*/ Some(Key::KEY_4),
    /*0x35*/ Some(Key::KEY_5),
    /*0x36*/ Some(Key::KEY_6),
    /*0x37*/ Some(Key::KEY_7),
    /*0x38*/ Some(Key::KEY_8),
    /*0x39*/ Some(Key::KEY_9),
    /*0x3A*/ None,
    /*0x3B*/ None,
    /*0x3C*/ None,
    /*0x3D*/ None,
    /*0x3E*/ None,
    /*0x3F*/ None,
    /*0x40*/ None,
    /*0x41*/ Some(Key::KEY_A),
    /*0x42*/ Some(Key::KEY_B),
    /*0x43*/ Some(Key::KEY_C),
    /*0x44*/ Some(Key::KEY_D),
    /*0x45*/ Some(Key::KEY_E),
    /*0x46*/ Some(Key::KEY_F),
    /*0x47*/ Some(Key::KEY_G),
    /*0x48*/ Some(Key::KEY_H),
    /*0x49*/ Some(Key::KEY_I),
    /*0x4A*/ Some(Key::KEY_J),
    /*0x4B*/ Some(Key::KEY_K),
    /*0x4C*/ Some(Key::KEY_L),
    /*0x4D*/ Some(Key::KEY_M),
    /*0x4E*/ Some(Key::KEY_N),
    /*0x4F*/ Some(Key::KEY_O),
    /*0x50*/ Some(Key::KEY_P),
    /*0x51*/ Some(Key::KEY_Q),
    /*0x52*/ Some(Key::KEY_R),
    /*0x53*/ Some(Key::KEY_S),
    /*0x54*/ Some(Key::KEY_T),
    /*0x55*/ Some(Key::KEY_U),
    /*0x56*/ Some(Key::KEY_V),
    /*0x57*/ Some(Key::KEY_W),
    /*0x58*/ Some(Key::KEY_X),
    /*0x59*/ Some(Key::KEY_Y),
    /*0x5A*/ Some(Key::KEY_Z),
    /*0x5B*/ Some(Key::VK_LWIN),
    /*0x5C*/ Some(Key::VK_RWIN),
    /*0x5D*/ Some(Key::VK_APPS),
    /*0x5E*/ None,
    /*0x5F*/ None,
    /*0x60*/ Some(Key::VK_NUMPAD0),
    /*0x61*/ Some(Key::VK_NUMPAD1),
    /*0x62*/ Some(Key::VK_NUMPAD2),
    /*0x63*/ Some(Key::VK_NUMPAD3),
    /*0x64*/ Some(Key::VK_NUMPAD4),
    /*0x65*/ Some(Key::VK_NUMPAD5),
    /*0x66*/ Some(Key::VK_NUMPAD6),
    /*0x67*/ Some(Key::VK_NUMPAD7),
    /*0x68*/ Some(Key::VK_NUMPAD8),
    /*0x69*/ Some(Key::VK_NUMPAD9),
    /*0x6A*/ Some(Key::VK_MULTIPLY),
    /*0x6B*/ Some(Key::VK_ADD),
    /*0x6C*/ Some(Key::VK_SEPARATOR),
    /*0x6D*/ Some(Key::VK_SUBTRACT),
    /*0x6E*/ Some(Key::VK_DECIMAL),
    /*0x6F*/ Some(Key::VK_DIVIDE),
    /*0x70*/ Some(Key::VK_F1),
    /*0x71*/ Some(Key::VK_F2),
    /*0x72*/ Some(Key::VK_F3),
    /*0x73*/ Some(Key::VK_F4),
    /*0x74*/ Some(Key::VK_F5),
    /*0x75*/ Some(Key::VK_F6),
    /*0x76*/ Some(Key::VK_F7),
    /*0x77*/ Some(Key::VK_F8),
    /*0x78*/ Some(Key::VK_F9),
    /*0x79*/ Some(Key::VK_F10),
    /*0x7A*/ Some(Key::VK_F11),
    /*0x7B*/ Some(Key::VK_F12),
    /*0x7C*/ Some(Key::VK_F13),
    /*0x7D*/ Some(Key::VK_F14),
    /*0x7E*/ Some(Key::VK_F15),
    /*0x7F*/ Some(Key::VK_F16),
    /*0x80*/ Some(Key::VK_F17),
    /*0x81*/ Some(Key::VK_F18),
    /*0x82*/ Some(Key::VK_F19),
    /*0x83*/ Some(Key::VK_F20),
    /*0x84*/ Some(Key::VK_F21),
    /*0x85*/ Some(Key::VK_F22),
    /*0x86*/ Some(Key::VK_F23),
    /*0x87*/ Some(Key::VK_F24),
    /*0x88*/ None,
    /*0x89*/ None,
    /*0x8A*/ None,
    /*0x8B*/ None,
    /*0x8C*/ None,
    /*0x8D*/ None,
    /*0x8E*/ None,
    /*0x8F*/ None,
    /*0x90*/ Some(Key::VK_NUMLOCK),
    /*0x91*/ Some(Key::VK_SCROLL),
    /*0x92*/ None,
    /*0x93*/ None,
    /*0x94*/ None,
    /*0x95*/ None,
    /*0x96*/ None,
    /*0x97*/ None,
    /*0x98*/ None,
    /*0x99*/ None,
    /*0x9A*/ None,
    /*0x9B*/ None,
    /*0x9C*/ None,
    /*0x9D*/ None,
    /*0x9E*/ None,
    /*0x9F*/ None,
    /*0xA0*/ Some(Key::VK_LSHIFT),
    /*0xA1*/ Some(Key::VK_RSHIFT),
    /*0xA2*/ Some(Key::VK_LCONTROL),
    /*0xA3*/ Some(Key::VK_RCONTROL),
    /*0xA4*/ Some(Key::VK_LMENU),
    /*0xA5*/ Some(Key::VK_RMENU),
    /*0xA6*/ None,
    /*0xA7*/ None,
    /*0xA8*/ None,
    /*0xA9*/ None,
    /*0xAA*/ None,
    /*0xAB*/ None,
    /*0xAC*/ None,
    /*0xAD*/ None,
    /*0xAE*/ None,
    /*0xAF*/ None,
    /*0xB0*/ None,
    /*0xB1*/ None,
    /*0xB2*/ None,
    /*0xB3*/ None,
    /*0xB4*/ None,
    /*0xB5*/ None,
    /*0xB6*/ None,
    /*0xB7*/ None,
    /*0xB8*/ None,
    /*0xB9*/ None,
    /*0xBA*/ None,
    /*0xBB*/ None,
    /*0xBC*/ Some(Key::VK_OEM_COMMA),
    /*0xBD*/ Some(Key::VK_OEM_MINUS),
    /*0xBE*/ Some(Key::VK_OEM_PERIOD),
    /*0xBF*/ None,
    /*0xC0*/ None,
    /*0xC1*/ None,
    /*0xC2*/ None,
    /*0xC3*/ None,
    /*0xC4*/ None,
    /*0xC5*/ None,
    /*0xC6*/ None,
    /*0xC7*/ None,
    /*0xC8*/ None,
    /*0xC9*/ None,
    /*0xCA*/ None,
    /*0xCB*/ None,
    /*0xCC*/ None,
    /*0xCD*/ None,
    /*0xCE*/ None,
    /*0xCF*/ None,
    /*0xD0*/ None,
    /*0xD1*/ None,
    /*0xD2*/ None,
    /*0xD3*/ None,
    /*0xD4*/ None,
    /*0xD5*/ None,
    /*0xD6*/ None,
    /*0xD7*/ None,
    /*0xD8*/ None,
    /*0xD9*/ None,
    /*0xDA*/ None,
    /*0xDB*/ None,
    /*0xDC*/ None,
    /*0xDD*/ None,
    /*0xDE*/ None,
    /*0xDF*/ None,
    /*0xE0*/ None,
    /*0xE1*/ None,
    /*0xE2*/ None,
    /*0xE3*/ None,
    /*0xE4*/ None,
    /*0xE5*/ None,
    /*0xE6*/ None,
    /*0xE7*/ None,
    /*0xE8*/ None,
    /*0xE9*/ None,
    /*0xEA*/ None,
    /*0xEB*/ None,
    /*0xEC*/ None,
    /*0xED*/ None,
    /*0xEE*/ None,
    /*0xEF*/ None,
    /*0xF0*/ None,
    /*0xF1*/ None,
    /*0xF2*/ None,
    /*0xF3*/ None,
    /*0xF4*/ None,
    /*0xF5*/ None,
    /*0xF6*/ None,
    /*0xF7*/ None,
    /*0xF8*/ None,
    /*0xF9*/ None,
    /*0xFA*/ None,
    /*0xFB*/ None,
    /*0xFC*/ None,
    /*0xFD*/ None,
    /*0xFE*/ None,
    /*0xFF*/ None,
];
